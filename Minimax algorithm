def is_winner(board, player):
win_states = [
[0,1,2], [3,4,5], [6,7,8], # rows
[0,3,6], [1,4,7], [2,5,8], # cols
[0,4,8], [2,4,6] # diagonals
]
return any(all(board[i] == player for i in line) for line in win_states)
def is_draw(board):
return ' ' not in board
def evaluate(board):
if is_winner(board, 'X'):
return +10
elif is_winner(board, 'O'):
return -10
else:
return 0
def minimax(board, depth, is_max):
score = evaluate(board)
if score == 10 or score == -10:
return score
if is_draw(board):
return 0
if is_max:
best = -float('inf')
for i in range(9):
if board[i] == ' ':
board[i] = 'X'
best = max(best, minimax(board, depth + 1, False))
board[i] = ' '
return best
else:
best = float('inf')
for i in range(9):
if board[i] == ' ':
board[i] = 'O'
best = min(best, minimax(board, depth + 1, True))
board[i] = ' '
return best
def find_best_move(board):
best_val = -float('inf')
best_move = -1
for i in range(9):
if board[i] == ' ':
board[i] = 'X'
move_val = minimax(board, 0, False)
board[i] = ' '
if move_val > best_val:
best_val = move_val
best_move = i
return best_move
board = ['X', 'O', 'X',
' ', 'O', ' ',
' ', ' ', ' ']
best_move = find_best_move(board)
print("Best move for 'X':", best_move)
